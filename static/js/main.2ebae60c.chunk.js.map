{"version":3,"sources":["features/VideoPlayer/VideoPlayer.module.scss","features/SubtitlesList/components/SubtitleCard/SubtitleCard.module.scss","features/SubtitlesPlayer/SubtitlesPlayer.module.scss","screens/MainScreen/MainScreen.module.scss","features/VideoSubtitlesPlayer/VideoSubtitlesPlayer.module.scss","features/SubtitlesList/SubtitleList.module.scss","assets/videos/video.mp4","features/VideoPlayer/videoPlayerSlice.js","features/VideoPlayer/VideoPlayer.jsx","constants/subtitles.js","features/SubtitlesPlayer/subtitlesPlayerSlice.js","features/SubtitlesPlayer/SubtitlesPlayer.jsx","features/VideoSubtitlesPlayer/VideoSubtitlesPlayer.jsx","features/SubtitlesList/components/SubtitleCard/SubtitleCard.jsx","features/SubtitlesList/SubtitlesList.jsx","screens/MainScreen/MainScreen.jsx","reportWebVitals.js","store.js","index.jsx"],"names":["module","exports","videoPlayerSlice","createSlice","name","initialState","videoDuration","currentTime","reducers","updateDuration","state","action","payload","updateCurrentTime","actions","VideoPlayer","useState","isPlaying","setVideoIsPlaying","sliderValue","setSliderValue","videoRef","useRef","dispatch","useDispatch","useSelector","player","storeCurrentTime","useEffect","current","duration","Number","isNaN","playVideoToggle","pause","play","className","styles","VideoPlayerWrapper","VideoWrapper","onPlay","onClick","id","onPauseCapture","onTimeUpdate","e","target","currentPercent","Math","abs","ref","src","mainVideo","controls","kind","VideoControl","IconButton","PlayButton","size","color","fontSize","SliderWrapper","Slider","value","onChange","_debounce","nextValue","percentage","aria-labelledby","max","min","TimeWrapper","Date","toISOString","substr","SUBTITLES","text","startTime","endTime","subtitlesPlayerSlice","activeSubtitle","updateActiveSubtitle","SubtitlesPlayer","currentSubtitle","subtitles","IntervalTree","normalizedTree","setNormalizedTree","tree","forEach","item","insert","nextCurrentSubtitle","search","SubtitlesWrapper","SubtitleItem","VideoSubtitlesPlayer","VideoSubtitlesPlayerWrapper","SubtitleCard","clickHandler","isActive","tabIndex","role","onKeyPress","classSet","ActiveCard","Paper","elevation","Text","CardBottom","StartTime","EndTime","defaultProps","SubtitlesList","List","map","nextTime","document","getElementById","onCardClickHandler","String","MainScreen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","videoPlayerReducer","subtitlesPlayerReducer","ReactDOM","render","StrictMode","store"],"mappings":"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","file":"static/js/main.2ebae60c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"VideoPlayerWrapper\":\"VideoPlayer_VideoPlayerWrapper__143mN\",\"VideoWrapper\":\"VideoPlayer_VideoWrapper__e0xaF\",\"VideoControl\":\"VideoPlayer_VideoControl__25TA6\",\"PlayButton\":\"VideoPlayer_PlayButton__HaSCN\",\"SliderWrapper\":\"VideoPlayer_SliderWrapper__2ACHg\",\"TimeWrapper\":\"VideoPlayer_TimeWrapper__3_MKc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SubtitleCard\":\"SubtitleCard_SubtitleCard__1ds_Z\",\"ActiveCard\":\"SubtitleCard_ActiveCard__3YrcB\",\"Text\":\"SubtitleCard_Text__166xB\",\"CardBottom\":\"SubtitleCard_CardBottom__3R_0G\",\"StartTime\":\"SubtitleCard_StartTime__vUX6q\",\"EndTime\":\"SubtitleCard_EndTime__ObLjv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SubtitlesWrapper\":\"SubtitlesPlayer_SubtitlesWrapper__23RXz\",\"SubtitleItem\":\"SubtitlesPlayer_SubtitleItem__3iPdg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainScreen\":\"MainScreen_MainScreen__3q2rv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"VideoSubtitlesPlayerWrapper\":\"VideoSubtitlesPlayer_VideoSubtitlesPlayerWrapper__3Sg47\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SubtitlesList\":\"SubtitleList_SubtitlesList__3fsrS\"};","export default __webpack_public_path__ + \"static/media/video.8c727da6.mp4\";","import { createSlice } from \"@reduxjs/toolkit\";\n/* eslint-disable no-param-reassign */\nexport const videoPlayerSlice = createSlice({\n  name: \"player\",\n  initialState: {\n    videoDuration: 0,\n    currentTime: 0,\n  },\n  reducers: {\n    updateDuration: (state, action) => {\n      state.videoDuration = action.payload.videoDuration;\n    },\n    updateCurrentTime: (state, action) => {\n      state.currentTime = action.payload.currentTime;\n    },\n  },\n});\n\nexport const { updateDuration, updateCurrentTime } = videoPlayerSlice.actions;\n\nexport default videoPlayerSlice.reducer;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { IconButton } from \"@material-ui/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport _debounce from \"lodash.debounce\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport Slider from \"@material-ui/core/Slider\";\nimport PauseIcon from \"@material-ui/icons/Pause\";\nimport styles from \"./VideoPlayer.module.scss\";\nimport mainVideo from \"../../assets/videos/video.mp4\";\nimport { updateDuration, updateCurrentTime } from \"./videoPlayerSlice\";\n\n\n\nexport const VideoPlayer = () => {\n  const [isPlaying, setVideoIsPlaying] = useState(false);\n  const [sliderValue, setSliderValue] = useState(0);\n  \n  const videoRef = useRef(null);\n  const dispatch = useDispatch();\n  const videoDuration = useSelector((state) => state.player.videoDuration);\n  const storeCurrentTime = useSelector((state) => state.player.currentTime);\n\n\n  const handleTimeUpdate = (e) => {\n    const { currentTime } = e.target;\n    const currentPercent = (currentTime / videoDuration) * 100;\n    // update slider position, only if  it has\n    // significant changes (in current case -  1% )\n    // do this for decrease re-renders\n    if (Math.abs(currentPercent - sliderValue) > 1) {\n      setSliderValue(currentPercent);\n    }\n    if (Math.abs(storeCurrentTime - currentTime) > 0.5) {\n      dispatch(updateCurrentTime({ currentTime }));\n    }\n  };\n\n  const handleSliderChange = (e, nextValue) => {\n    const percentage = nextValue / 100;\n    if (videoRef.current) {\n      videoRef.current.currentTime = videoDuration * percentage;\n    }\n  };\n\n  useEffect(() => {\n    if (videoRef.current) {\n      const {duration} = videoRef.current;\n      if (!Number.isNaN(duration)) {\n        dispatch(updateDuration({ videoDuration: duration }));\n      }\n      \n      \n    }\n  }, [videoRef.current]);\n\n\n\n  const onPlayHandle = () => {\n    setVideoIsPlaying(true);\n  };\n  const onPauseHandle = () => {\n    setVideoIsPlaying(false);\n  };\n\n  const playVideoToggle = () => {\n    if (videoRef.current) {\n      if (isPlaying) {\n        videoRef.current.pause();\n      } else {\n        videoRef.current.play();\n      }\n    }\n  };\n\n  return (\n    <div className={styles.VideoPlayerWrapper}>\n      <div className={styles.VideoWrapper}>\n        <video\n          onPlay={onPlayHandle}\n          onClick={playVideoToggle}\n          id=\"global-player\"\n          onPauseCapture={onPauseHandle}\n          onTimeUpdate={handleTimeUpdate}\n          ref={videoRef}\n          src={mainVideo}\n          controls={false}\n        >\n          <track kind=\"captions\" />\n        </video>\n        <div className={styles.VideoControl}>\n          <IconButton\n            className={styles.PlayButton}\n            size=\"medium\"\n            color=\"primary\"\n            onClick={playVideoToggle}\n          >\n            {isPlaying ? (\n              <PauseIcon fontSize=\"14px\" />\n            ) : (\n              <PlayArrowIcon fontSize=\"14px\" />\n            )}\n          </IconButton>\n          <div className={styles.SliderWrapper}>\n            <Slider\n              value={sliderValue}\n              onChange={_debounce(handleSliderChange, 250)}\n              aria-labelledby=\"continuous-slider\"\n              max={100}\n              min={0}\n            />\n          </div>\n          <div className={styles.TimeWrapper}>\n            {new Date(storeCurrentTime * 1000).toISOString().substr(11, 8)}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nVideoPlayer.propTypes = {};\n","export const SUBTITLES = [\n  {\n    text: \"* звук тяжелого бега*\",\n    startTime: 0.0,\n    endTime: 1.5,\n  },\n  {\n    text: \"* звуки крутости *\",\n    startTime: 4,\n    endTime: 5.5,\n  },\n  {\n    text: \"* звук приближающегося дедлайна * \",\n    startTime: 6,\n    endTime: 8,\n  },\n  {\n    text: \"* звучит казахская музыка * \",\n    startTime: 9,\n    endTime: 15,\n  },\n  {\n    text: \"* пиу-пиу-пиу * \",\n    startTime: 19,\n    endTime: 21,\n  },\n  {\n    text: \"* поет на иностранном * \",\n    startTime: 26,\n    endTime: 28,\n  },\n  {\n    text: \" отсылка к матрице  \",\n    startTime: 34,\n    endTime: 37,\n  },\n  {\n    text: \"* цыфры знаешь - набери * \",\n    startTime: 39,\n    endTime: 41,\n  },\n  {\n    text: \"* звуки того, как крутые парни не смотрят на взрыв * \",\n    startTime: 64.57,\n    endTime: 70,\n  },\n  {\n    text: \"Cериал БРИГАДА\",\n    startTime: 71.5,\n    endTime: 73,\n  },\n];\n","import { createSlice } from \"@reduxjs/toolkit\";\n/* eslint-disable no-param-reassign */\nexport const subtitlesPlayerSlice = createSlice({\n  name: \"subtitles\",\n  initialState: {\n    activeSubtitle: {},\n  },\n  reducers: {\n    updateActiveSubtitle: (state, action) => {\n      state.activeSubtitle = action.payload.activeSubtitle;\n    },\n  },\n});\n\nexport const { updateActiveSubtitle } = subtitlesPlayerSlice.actions;\n\nexport default subtitlesPlayerSlice.reducer;\n","import React, { useEffect, useState } from \"react\";\n\nimport IntervalTree from \"@flatten-js/interval-tree\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SUBTITLES } from \"../../constants/subtitles\";\nimport styles from \"./SubtitlesPlayer.module.scss\";\nimport { updateActiveSubtitle  } from \"./subtitlesPlayerSlice\";\n\nexport const SubtitlesPlayer = () => {\n  const storeCurrentTime = useSelector((state) => state.player.currentTime);\n  const currentSubtitle = useSelector((state) => state.subtitles.activeSubtitle);\n  const dispatch = useDispatch();\n  const [normalizedTree, setNormalizedTree] = useState(new IntervalTree());\n\n  useEffect(() => {\n    const tree = new IntervalTree();\n    SUBTITLES.forEach((item) => {\n      tree.insert([item.startTime, item.endTime], item);\n    });\n    setNormalizedTree(tree);\n  }, []);\n\n  useEffect(() => {\n    const nextCurrentSubtitle = normalizedTree.search([\n      storeCurrentTime,\n      storeCurrentTime,\n    ])[0];\n    if (\n      nextCurrentSubtitle &&\n      nextCurrentSubtitle.text !== currentSubtitle?.text\n    ) {\n\n      dispatch(updateActiveSubtitle( {activeSubtitle: nextCurrentSubtitle}))\n      \n    } else if (!nextCurrentSubtitle?.text && currentSubtitle?.text) {\n      dispatch(updateActiveSubtitle( {activeSubtitle: {}}))\n    }\n  }, [storeCurrentTime]);\n\n  return (\n    <div className={styles.SubtitlesWrapper}>\n      {currentSubtitle.text && (\n        <div className={styles.SubtitleItem}>{currentSubtitle.text}</div>\n      )}\n    </div>\n  );\n};\n\nSubtitlesPlayer.propTypes = {};\n","import React from \"react\";\n\nimport VideoPlayer from \"../VideoPlayer\";\nimport SubtitlesPlayer from \"../SubtitlesPlayer\";\nimport styles from \"./VideoSubtitlesPlayer.module.scss\";\n\nexport const VideoSubtitlesPlayer = () => (\n  <div className={styles.VideoSubtitlesPlayerWrapper}>\n    <VideoPlayer />\n    <SubtitlesPlayer />\n  </div>\n);\n\nVideoSubtitlesPlayer.propTypes = {};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Paper from \"@material-ui/core/Paper\";\nimport classSet from 'classnames';\nimport styles from \"./SubtitleCard.module.scss\";\n\nexport const SubtitleCard = ({ clickHandler, text, startTime, endTime, isActive }) => (\n  <div\n    onClick={clickHandler}\n    tabIndex={0}\n    role=\"button\"\n    onKeyPress={() => {}}\n    className={classSet({\n      [styles.SubtitleCard]: true,\n      [styles.ActiveCard]: isActive\n    })}\n  >\n    <Paper elevation={3}>\n      <p className={styles.Text}>{text}</p>\n      <div className={styles.CardBottom}>\n        <span className={styles.StartTime}>\n          {new Date(startTime * 1000).toISOString().substr(11, 11)}\n        </span>\n        <span className={styles.EndTime}>\n          {new Date(endTime * 1000).toISOString().substr(11, 11)}\n        </span>\n      </div>\n    </Paper>\n  </div>\n);\n\nSubtitleCard.propTypes = {\n  startTime: PropTypes.number.isRequired,\n  endTime: PropTypes.number.isRequired,\n  text: PropTypes.string.isRequired,\n  clickHandler: PropTypes.func.isRequired,\n  isActive: PropTypes.bool,\n};\nSubtitleCard.defaultProps = {\n  isActive: false,\n}","import React from \"react\";\n\nimport { List } from \"@material-ui/core\";\n\nimport { useSelector } from \"react-redux\";\nimport { SUBTITLES } from \"../../constants/subtitles\";\nimport SubtitleCard from \"./components/SubtitleCard\";\n\nimport styles from \"./SubtitleList.module.scss\";\n\n\nconst SubtitlesList = () => {\n  const currentSubtitle = useSelector((state) => state.subtitles.activeSubtitle);\n\n  const onCardClickHandler = (nextTime) => {\n    const player = document.getElementById(\"global-player\");\n    if (player) {\n      player.currentTime = nextTime;\n    }\n  };\n \n  return (\n    <div className={styles.SubtitlesList}>\n      <List>\n        {SUBTITLES.map(({ text, startTime, endTime }) =>  (\n          \n          <SubtitleCard\n            clickHandler={() => {\n              onCardClickHandler(startTime);\n            }}\n       \n            isActive={startTime === currentSubtitle.startTime}\n            key={`${String(startTime)}-${String(endTime)}`}\n            text={text}\n            startTime={startTime}\n            endTime={endTime}\n          />\n        ))}\n      </List>\n    </div>\n  );\n};\n\nSubtitlesList.propTypes = {};\n\nexport default SubtitlesList;\n","import React from \"react\";\nimport styles from \"./MainScreen.module.scss\";\nimport VideoSubtitlesPlayer from \"../../features/VideoSubtitlesPlayer\";\nimport SubtitlesList from \"../../features/SubtitlesList/SubtitlesList\";\n// import PropTypes from 'prop-types';\n\nexport const MainScreen = () => (\n  <div className={styles.MainScreen}>\n    <VideoSubtitlesPlayer />\n    <SubtitlesList />\n  </div>\n);\n\nMainScreen.propTypes = {};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport subtitlesPlayerReducer from './features/SubtitlesPlayer/subtitlesPlayerSlice';\nimport videoPlayerReducer from './features/VideoPlayer/videoPlayerSlice'\n\nexport default configureStore({\n    reducer: {\n        player: videoPlayerReducer,\n        subtitles: subtitlesPlayerReducer\n    },\n  })","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./scss/app.global.scss\";\n\nimport MainScreen from \"./screens/MainScreen\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <MainScreen />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}